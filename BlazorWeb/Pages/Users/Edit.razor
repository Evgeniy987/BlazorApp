@using DAL_Dapper
@using DAL_Dapper.Models
@using FluentValidation
@using BlazorWeb.Data
@using BlazorWeb.Validators

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@inject IDapperData _db

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>

        <MudForm Model="@obj" @ref="form" Validation="@(formValidator.ValidateValue)" ValidationDelay="0">

            <div class="d-flex flex-row align-content-center mb-2">
                <MudAvatar Color="(MudBlazor.Color)obj.BadgeColor" Class="mr-2">@obj.BadgeText</MudAvatar>
                <MudChip Color="Color.Primary" OnClick="@(e => {obj.BadgeColor = (int) Color.Primary;})"></MudChip>
                <MudChip Color="Color.Secondary" OnClick="@(e => {obj.BadgeColor = (int) Color.Secondary;})"></MudChip>
                <MudChip Color="Color.Info" OnClick="@(e => {obj.BadgeColor = (int)Color.Info;})"></MudChip>
                <MudChip Color="Color.Success" OnClick="@(e => {obj.BadgeColor = (int)Color.Success;})"></MudChip>
                <MudChip Color="Color.Warning" OnClick="@(e => {obj.BadgeColor = (int)Color.Warning;})"></MudChip>
                <MudChip Color="Color.Error" OnClick="@(e => {obj.BadgeColor = (int)Color.Error;})"></MudChip>
            </div>
            <MudTextField @bind-Value="obj.Name"
                          For="@(() => obj.Name)"
                          Variant="Variant.Outlined"
                          Class="mt-3"
                          Label="Сотрудник *" />

            <MudTextField @bind-Value="obj.LongName"
                          For="@(() => obj.LongName)"
                          Variant="Variant.Outlined"
                          Class="mt-3"
                          Label="Должность" />

            <MudTextField @bind-Value="@obj.PhoneNumber"
                          For="@(() => obj.PhoneNumber)"
                          InputType="InputType.Telephone"
                          Variant="Variant.Outlined"
                          Class="mt-3"
                          Label="Телефон" />

            <MudTextField @bind-Value="@obj.EmailAddress"
                          For="@(() => obj.EmailAddress)"
                          InputType="InputType.Email"
                          Variant="Variant.Outlined"
                          Class="mt-3"
                          Label="Email" />

            <MudTextField Variant="Variant.Outlined" Lines="3" Class="mt-3"
                          @bind-Value="obj.Notes"
                          For="@(() => obj.Notes)"
                          Label="Примечания" />

        </MudForm>

        <MudChipSet @bind-SelectedChips="selectedRoles" MultiSelection="true" Filter="true" Class="align-center pt-2">
            @foreach (var role in ListData.Roles)
            {
                <MudChip Text="@role.Value" Tag="@role.Key" Size="Size.Small" Default="@(tags?.Contains(role.Key))"></MudChip>
            }
        </MudChipSet>


    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Delete">Удалить</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();

    [Parameter]
    public UserProfile UserProfile { get; set; } = new();

    [Parameter]
    public User obj { get; set; } = default!;

    string[]? tags;
    MudChip[]? selectedRoles;
    MudForm? form = default!;

    UserModelFluentValidator formValidator = new UserModelFluentValidator();

    protected override void OnInitialized()
    {
        tags = obj.Tags.Select(p => p.Title!).ToArray();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void Delete()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Удалить запись?",
            "Удаленные данные восстановить невозможно!",
            yesText: "Удалить", cancelText: "Отмена");

        if (result == true)
        {
            obj.IsDisabled = true;
            obj.DisabledBy = UserProfile.UserName;
            await _db.UserUpd(obj);

            Snackbar.Add("Данные удалены", MudBlazor.Severity.Error);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private async void Submit()
    {
        await form!.Validate();

        if (form.IsValid)
        {
            obj.CreatedAt = DateTime.Now;
            obj.CreatedBy = UserProfile.UserName;

            await _db.UserUpd(obj);

            if (selectedRoles != null)
            {
                await _db.UserRolesDelete(obj.Id);

                var t = selectedRoles.Select(s => new Tag
                    {
                        ObjName = "User",
                        ObjId = obj.Id,
                        Title = (string?)s.Tag,
                        CreatedAt = DateTime.Now,
                        CreatedBy = UserProfile.UserName
                    });
                await _db.TagsAdd(t);
            }


            Snackbar.Add("Данные сохранены", MudBlazor.Severity.Success);
            MudDialog.Close(DialogResult.Ok(obj));

        }

    }




}
